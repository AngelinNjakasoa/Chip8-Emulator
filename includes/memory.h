#ifndef __RAMCHIP8_H__
# define __RAMCHIP8_H__

#include <string>

/* Emulates Chip8 memory */
class RAMChip8 {
 public:
 RAMChip8()
   : id("memory") {
    const uint8_t font_sprites [80] = {
      0xF0, 0x90, 0x90, 0x90, 0xF0,
      0x20, 0x60, 0x20, 0x20, 0x70,
      0xF0, 0x10, 0xF0, 0x80, 0xF0,
      0xF0, 0x10, 0xF0, 0x10, 0xF0,
      0x90, 0x90, 0xF0, 0x10, 0x10,
      0xF0, 0x80, 0xF0, 0x10, 0xF0,
      0xF0, 0x80, 0xF0, 0x90, 0xF0,
      0xF0, 0x10, 0x20, 0x40, 0x40,
      0xF0, 0x90, 0xF0, 0x90, 0xF0,
      0xF0, 0x90, 0xF0, 0x10, 0xF0,
      0xF0, 0x90, 0xF0, 0x90, 0x90,
      0xE0, 0x90, 0xE0, 0x90, 0xE0,
      0xF0, 0x80, 0x80, 0x80, 0xF0,
      0xE0, 0x90, 0x90, 0x90, 0xE0,
      0xF0, 0x80, 0xF0, 0x80, 0xF0,
      0xF0, 0x80, 0xF0, 0x80, 0x80
    };

    for (uint i = 0; i < 80; ++i) {
      memory[i] = font_sprites[i];
    }
  }

  uint16_t stack[16];

  uint8_t memory[4096];

  uint8_t read_memory(const uint16_t pc) {
    return memory[pc];
  }

  void write_memory(const uint16_t pc, const uint8_t value) {
    memory[pc] = value;
  }

  uint8_t push_stack(uint8_t sp, const uint16_t value) {
    stack[sp] = value;
    return sp - 1;
  }

  uint8_t pop_stack(uint8_t sp) {
    stack[sp] = 0x0000;
    return sp + 1;
  }

  std::string id;
};

#endif /* __RAMCHIP8_H__ */
